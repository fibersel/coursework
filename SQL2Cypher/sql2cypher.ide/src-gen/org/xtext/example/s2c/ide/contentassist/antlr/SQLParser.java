/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.s2c.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.s2c.ide.contentassist.antlr.internal.InternalSQLParser;
import org.xtext.example.s2c.services.SQLGrammarAccess;

public class SQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFromItemAccess().getAlternatives_0(), "rule__FromItem__Alternatives_0");
			builder.put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
			builder.put(grammarAccess.getBinaryAccess().getAlternatives_1(), "rule__Binary__Alternatives_1");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup_2(), "rule__Select__Group_2__0");
			builder.put(grammarAccess.getFromSectionAccess().getGroup(), "rule__FromSection__Group__0");
			builder.put(grammarAccess.getFromItemAccess().getGroup(), "rule__FromItem__Group__0");
			builder.put(grammarAccess.getFromItemAccess().getGroup_0_1(), "rule__FromItem__Group_0_1__0");
			builder.put(grammarAccess.getFromItemAccess().getGroup_1(), "rule__FromItem__Group_1__0");
			builder.put(grammarAccess.getWhere_clauseAccess().getGroup(), "rule__Where_clause__Group__0");
			builder.put(grammarAccess.getBoolExpressionAccess().getGroup(), "rule__BoolExpression__Group__0");
			builder.put(grammarAccess.getBoolExpressionAccess().getGroup_1(), "rule__BoolExpression__Group_1__0");
			builder.put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
			builder.put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_0(), "rule__Factor__Group_0__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getBinaryAccess().getGroup(), "rule__Binary__Group__0");
			builder.put(grammarAccess.getGroup_clauseAccess().getGroup(), "rule__Group_clause__Group__0");
			builder.put(grammarAccess.getGroup_clauseAccess().getGroup_3(), "rule__Group_clause__Group_3__0");
			builder.put(grammarAccess.getHaving_clauseAccess().getGroup(), "rule__Having_clause__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_3(), "rule__Expression__Group_3__0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment(), "rule__Model__StatementsAssignment");
			builder.put(grammarAccess.getSelectAccess().getExpressionsAssignment_1(), "rule__Select__ExpressionsAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getExpressionsAssignment_2_1(), "rule__Select__ExpressionsAssignment_2_1");
			builder.put(grammarAccess.getSelectAccess().getFrom_sectionAssignment_3(), "rule__Select__From_sectionAssignment_3");
			builder.put(grammarAccess.getSelectAccess().getWhere_sectionAssignment_4(), "rule__Select__Where_sectionAssignment_4");
			builder.put(grammarAccess.getSelectAccess().getGroup_sectionAssignment_5(), "rule__Select__Group_sectionAssignment_5");
			builder.put(grammarAccess.getSelectAccess().getHaving_sectionAssignment_6(), "rule__Select__Having_sectionAssignment_6");
			builder.put(grammarAccess.getFromSectionAccess().getFrom_itemAssignment_1(), "rule__FromSection__From_itemAssignment_1");
			builder.put(grammarAccess.getFromItemAccess().getTable_nameAssignment_0_0(), "rule__FromItem__Table_nameAssignment_0_0");
			builder.put(grammarAccess.getFromItemAccess().getSelect_exprAssignment_0_1_1(), "rule__FromItem__Select_exprAssignment_0_1_1");
			builder.put(grammarAccess.getFromItemAccess().getRhsAssignment_1_1(), "rule__FromItem__RhsAssignment_1_1");
			builder.put(grammarAccess.getFromItemAccess().getBool_exprAssignment_1_3(), "rule__FromItem__Bool_exprAssignment_1_3");
			builder.put(grammarAccess.getWhere_clauseAccess().getBool_exprAssignment_1(), "rule__Where_clause__Bool_exprAssignment_1");
			builder.put(grammarAccess.getBoolExpressionAccess().getLhsAssignment_0(), "rule__BoolExpression__LhsAssignment_0");
			builder.put(grammarAccess.getBoolExpressionAccess().getRhsAssignment_1_1(), "rule__BoolExpression__RhsAssignment_1_1");
			builder.put(grammarAccess.getTermAccess().getLhsAssignment_0(), "rule__Term__LhsAssignment_0");
			builder.put(grammarAccess.getTermAccess().getRhsAssignment_1_1(), "rule__Term__RhsAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getFactorAssignment_0_1(), "rule__Factor__FactorAssignment_0_1");
			builder.put(grammarAccess.getFactorAccess().getExprAssignment_1_1(), "rule__Factor__ExprAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getBinexpAssignment_4(), "rule__Factor__BinexpAssignment_4");
			builder.put(grammarAccess.getBinaryAccess().getLhsAssignment_0(), "rule__Binary__LhsAssignment_0");
			builder.put(grammarAccess.getBinaryAccess().getRhsAssignment_2(), "rule__Binary__RhsAssignment_2");
			builder.put(grammarAccess.getColumnAccess().getNameAssignment(), "rule__Column__NameAssignment");
			builder.put(grammarAccess.getGroup_clauseAccess().getExpressionsAssignment_2(), "rule__Group_clause__ExpressionsAssignment_2");
			builder.put(grammarAccess.getGroup_clauseAccess().getExpressionsAssignment_3_1(), "rule__Group_clause__ExpressionsAssignment_3_1");
			builder.put(grammarAccess.getHaving_clauseAccess().getExprAssignment_1(), "rule__Having_clause__ExprAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getColAssignment_1(), "rule__Expression__ColAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getColAssignment_3_1(), "rule__Expression__ColAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SQLGrammarAccess grammarAccess;

	@Override
	protected InternalSQLParser createParser() {
		InternalSQLParser result = new InternalSQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
