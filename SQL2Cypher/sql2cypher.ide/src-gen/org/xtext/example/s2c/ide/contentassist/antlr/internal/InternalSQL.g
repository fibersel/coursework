/*
 * generated by Xtext 2.25.0
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.s2c.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.s2c.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.s2c.services.SQLGrammarAccess;

}
@parser::members {
	private SQLGrammarAccess grammarAccess;

	public void setGrammarAccess(SQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStatementsAssignment()); }
		(rule__Model__StatementsAssignment)
		{ after(grammarAccess.getModelAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleselect
entryRuleselect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleselect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule select
ruleselect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefromSection
entryRulefromSection
:
{ before(grammarAccess.getFromSectionRule()); }
	 rulefromSection
{ after(grammarAccess.getFromSectionRule()); } 
	 EOF 
;

// Rule fromSection
rulefromSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromSectionAccess().getGroup()); }
		(rule__FromSection__Group__0)
		{ after(grammarAccess.getFromSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefromItem
entryRulefromItem
:
{ before(grammarAccess.getFromItemRule()); }
	 rulefromItem
{ after(grammarAccess.getFromItemRule()); } 
	 EOF 
;

// Rule fromItem
rulefromItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFromItemAccess().getGroup()); }
		(rule__FromItem__Group__0)
		{ after(grammarAccess.getFromItemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulewhere_clause
entryRulewhere_clause
:
{ before(grammarAccess.getWhere_clauseRule()); }
	 rulewhere_clause
{ after(grammarAccess.getWhere_clauseRule()); } 
	 EOF 
;

// Rule where_clause
rulewhere_clause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhere_clauseAccess().getGroup()); }
		(rule__Where_clause__Group__0)
		{ after(grammarAccess.getWhere_clauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleboolExpression
entryRuleboolExpression
:
{ before(grammarAccess.getBoolExpressionRule()); }
	 ruleboolExpression
{ after(grammarAccess.getBoolExpressionRule()); } 
	 EOF 
;

// Rule boolExpression
ruleboolExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getGroup()); }
		(rule__BoolExpression__Group__0)
		{ after(grammarAccess.getBoolExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getGroup()); }
		(rule__Term__Group__0)
		{ after(grammarAccess.getTermAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getAlternatives()); }
		(rule__Factor__Alternatives)
		{ after(grammarAccess.getFactorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinary
entryRuleBinary
:
{ before(grammarAccess.getBinaryRule()); }
	 ruleBinary
{ after(grammarAccess.getBinaryRule()); } 
	 EOF 
;

// Rule Binary
ruleBinary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryAccess().getGroup()); }
		(rule__Binary__Group__0)
		{ after(grammarAccess.getBinaryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getNameAssignment()); }
		(rule__Column__NameAssignment)
		{ after(grammarAccess.getColumnAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulegroup_clause
entryRulegroup_clause
:
{ before(grammarAccess.getGroup_clauseRule()); }
	 rulegroup_clause
{ after(grammarAccess.getGroup_clauseRule()); } 
	 EOF 
;

// Rule group_clause
rulegroup_clause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroup_clauseAccess().getGroup()); }
		(rule__Group_clause__Group__0)
		{ after(grammarAccess.getGroup_clauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulehaving_clause
entryRulehaving_clause
:
{ before(grammarAccess.getHaving_clauseRule()); }
	 rulehaving_clause
{ after(grammarAccess.getHaving_clauseRule()); } 
	 EOF 
;

// Rule having_clause
rulehaving_clause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHaving_clauseAccess().getGroup()); }
		(rule__Having_clause__Group__0)
		{ after(grammarAccess.getHaving_clauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getTable_nameAssignment_0_0()); }
		(rule__FromItem__Table_nameAssignment_0_0)
		{ after(grammarAccess.getFromItemAccess().getTable_nameAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFromItemAccess().getGroup_0_1()); }
		(rule__FromItem__Group_0_1__0)
		{ after(grammarAccess.getFromItemAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getGroup_0()); }
		(rule__Factor__Group_0__0)
		{ after(grammarAccess.getFactorAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getGroup_1()); }
		(rule__Factor__Group_1__0)
		{ after(grammarAccess.getFactorAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getTRUEKeyword_2()); }
		'TRUE'
		{ after(grammarAccess.getFactorAccess().getTRUEKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getFALSEKeyword_3()); }
		'FALSE'
		{ after(grammarAccess.getFactorAccess().getFALSEKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getFactorAccess().getBinexpAssignment_4()); }
		(rule__Factor__BinexpAssignment_4)
		{ after(grammarAccess.getFactorAccess().getBinexpAssignment_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getLessThanSignKeyword_1_0()); }
		'<'
		{ after(grammarAccess.getBinaryAccess().getLessThanSignKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getGreaterThanSignKeyword_1_1()); }
		'>'
		{ after(grammarAccess.getBinaryAccess().getGreaterThanSignKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getEqualsSignKeyword_1_2()); }
		'='
		{ after(grammarAccess.getBinaryAccess().getEqualsSignKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getGreaterThanSignEqualsSignKeyword_1_3()); }
		'>='
		{ after(grammarAccess.getBinaryAccess().getGreaterThanSignEqualsSignKeyword_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAccess().getLessThanSignEqualsSignKeyword_1_4()); }
		'<='
		{ after(grammarAccess.getBinaryAccess().getLessThanSignEqualsSignKeyword_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getExpressionAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getColAssignment_1()); }
		(rule__Expression__ColAssignment_1)
		{ after(grammarAccess.getExpressionAccess().getColAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getCountKeyword_2()); }
		'count()'
		{ after(grammarAccess.getExpressionAccess().getCountKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_3()); }
		(rule__Expression__Group_3__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSELECTKeyword_0()); }
	'SELECT'
	{ after(grammarAccess.getSelectAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
	rule__Select__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getExpressionsAssignment_1()); }
	(rule__Select__ExpressionsAssignment_1)
	{ after(grammarAccess.getSelectAccess().getExpressionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__2__Impl
	rule__Select__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getGroup_2()); }
	(rule__Select__Group_2__0)*
	{ after(grammarAccess.getSelectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__3__Impl
	rule__Select__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getFrom_sectionAssignment_3()); }
	(rule__Select__From_sectionAssignment_3)?
	{ after(grammarAccess.getSelectAccess().getFrom_sectionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__4__Impl
	rule__Select__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getWhere_sectionAssignment_4()); }
	(rule__Select__Where_sectionAssignment_4)?
	{ after(grammarAccess.getSelectAccess().getWhere_sectionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__5__Impl
	rule__Select__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getGroup_sectionAssignment_5()); }
	(rule__Select__Group_sectionAssignment_5)?
	{ after(grammarAccess.getSelectAccess().getGroup_sectionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getHaving_sectionAssignment_6()); }
	(rule__Select__Having_sectionAssignment_6)?
	{ after(grammarAccess.getSelectAccess().getHaving_sectionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group_2__0__Impl
	rule__Select__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSelectAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getExpressionsAssignment_2_1()); }
	(rule__Select__ExpressionsAssignment_2_1)
	{ after(grammarAccess.getSelectAccess().getExpressionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromSection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromSection__Group__0__Impl
	rule__FromSection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromSectionAccess().getFROMKeyword_0()); }
	'FROM'
	{ after(grammarAccess.getFromSectionAccess().getFROMKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromSection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromSectionAccess().getFrom_itemAssignment_1()); }
	(rule__FromSection__From_itemAssignment_1)
	{ after(grammarAccess.getFromSectionAccess().getFrom_itemAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromItem__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group__0__Impl
	rule__FromItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getAlternatives_0()); }
	(rule__FromItem__Alternatives_0)
	{ after(grammarAccess.getFromItemAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getGroup_1()); }
	(rule__FromItem__Group_1__0)?
	{ after(grammarAccess.getFromItemAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromItem__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__0__Impl
	rule__FromItem__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getLeftParenthesisKeyword_0_1_0()); }
	'('
	{ after(grammarAccess.getFromItemAccess().getLeftParenthesisKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__1__Impl
	rule__FromItem__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getSelect_exprAssignment_0_1_1()); }
	(rule__FromItem__Select_exprAssignment_0_1_1)
	{ after(grammarAccess.getFromItemAccess().getSelect_exprAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getRightParenthesisKeyword_0_1_2()); }
	')'
	{ after(grammarAccess.getFromItemAccess().getRightParenthesisKeyword_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FromItem__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__0__Impl
	rule__FromItem__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getJOINKeyword_1_0()); }
	'JOIN'
	{ after(grammarAccess.getFromItemAccess().getJOINKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__1__Impl
	rule__FromItem__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getRhsAssignment_1_1()); }
	(rule__FromItem__RhsAssignment_1_1)
	{ after(grammarAccess.getFromItemAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__2__Impl
	rule__FromItem__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getONKeyword_1_2()); }
	'ON'
	{ after(grammarAccess.getFromItemAccess().getONKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FromItem__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFromItemAccess().getBool_exprAssignment_1_3()); }
	(rule__FromItem__Bool_exprAssignment_1_3)
	{ after(grammarAccess.getFromItemAccess().getBool_exprAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where_clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where_clause__Group__0__Impl
	rule__Where_clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where_clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhere_clauseAccess().getWHEREKeyword_0()); }
	'WHERE'
	{ after(grammarAccess.getWhere_clauseAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where_clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where_clause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where_clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhere_clauseAccess().getBool_exprAssignment_1()); }
	(rule__Where_clause__Bool_exprAssignment_1)
	{ after(grammarAccess.getWhere_clauseAccess().getBool_exprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group__0__Impl
	rule__BoolExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getLhsAssignment_0()); }
	(rule__BoolExpression__LhsAssignment_0)
	{ after(grammarAccess.getBoolExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getGroup_1()); }
	(rule__BoolExpression__Group_1__0)?
	{ after(grammarAccess.getBoolExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoolExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group_1__0__Impl
	rule__BoolExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getORKeyword_1_0()); }
	'OR'
	{ after(grammarAccess.getBoolExpressionAccess().getORKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoolExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolExpressionAccess().getRhsAssignment_1_1()); }
	(rule__BoolExpression__RhsAssignment_1_1)
	{ after(grammarAccess.getBoolExpressionAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getLhsAssignment_0()); }
	(rule__Term__LhsAssignment_0)
	{ after(grammarAccess.getTermAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getGroup_1()); }
	(rule__Term__Group_1__0)
	{ after(grammarAccess.getTermAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getANDKeyword_1_0()); }
	'AND'
	{ after(grammarAccess.getTermAccess().getANDKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getRhsAssignment_1_1()); }
	(rule__Term__RhsAssignment_1_1)
	{ after(grammarAccess.getTermAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__0__Impl
	rule__Factor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getNOTKeyword_0_0()); }
	'NOT'
	{ after(grammarAccess.getFactorAccess().getNOTKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getFactorAssignment_0_1()); }
	(rule__Factor__FactorAssignment_0_1)
	{ after(grammarAccess.getFactorAccess().getFactorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getFactorAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getExprAssignment_1_1()); }
	(rule__Factor__ExprAssignment_1_1)
	{ after(grammarAccess.getFactorAccess().getExprAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getFactorAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Binary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__0__Impl
	rule__Binary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getLhsAssignment_0()); }
	(rule__Binary__LhsAssignment_0)
	{ after(grammarAccess.getBinaryAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__1__Impl
	rule__Binary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getAlternatives_1()); }
	(rule__Binary__Alternatives_1)
	{ after(grammarAccess.getBinaryAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Binary__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAccess().getRhsAssignment_2()); }
	(rule__Binary__RhsAssignment_2)
	{ after(grammarAccess.getBinaryAccess().getRhsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Group_clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_clause__Group__0__Impl
	rule__Group_clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_clauseAccess().getGROUPKeyword_0()); }
	'GROUP'
	{ after(grammarAccess.getGroup_clauseAccess().getGROUPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_clause__Group__1__Impl
	rule__Group_clause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_clauseAccess().getBYKeyword_1()); }
	'BY'
	{ after(grammarAccess.getGroup_clauseAccess().getBYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_clause__Group__2__Impl
	rule__Group_clause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_clauseAccess().getExpressionsAssignment_2()); }
	(rule__Group_clause__ExpressionsAssignment_2)
	{ after(grammarAccess.getGroup_clauseAccess().getExpressionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_clause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_clauseAccess().getGroup_3()); }
	(rule__Group_clause__Group_3__0)*
	{ after(grammarAccess.getGroup_clauseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Group_clause__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_clause__Group_3__0__Impl
	rule__Group_clause__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_clauseAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getGroup_clauseAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_clause__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_clauseAccess().getExpressionsAssignment_3_1()); }
	(rule__Group_clause__ExpressionsAssignment_3_1)
	{ after(grammarAccess.getGroup_clauseAccess().getExpressionsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Having_clause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Having_clause__Group__0__Impl
	rule__Having_clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Having_clause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaving_clauseAccess().getHAVINGKeyword_0()); }
	'HAVING'
	{ after(grammarAccess.getHaving_clauseAccess().getHAVINGKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Having_clause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Having_clause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Having_clause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHaving_clauseAccess().getExprAssignment_1()); }
	(rule__Having_clause__ExprAssignment_1)
	{ after(grammarAccess.getHaving_clauseAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_3__0__Impl
	rule__Expression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getSumKeyword_3_0()); }
	'sum('
	{ after(grammarAccess.getExpressionAccess().getSumKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_3__1__Impl
	rule__Expression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getColAssignment_3_1()); }
	(rule__Expression__ColAssignment_3_1)
	{ after(grammarAccess.getExpressionAccess().getColAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsSelectParserRuleCall_0()); }
		ruleselect
		{ after(grammarAccess.getModelAccess().getStatementsSelectParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ExpressionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getExpressionsExpressionParserRuleCall_1_0()); }
		ruleexpression
		{ after(grammarAccess.getSelectAccess().getExpressionsExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__ExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
		ruleexpression
		{ after(grammarAccess.getSelectAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__From_sectionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getFrom_sectionFromSectionParserRuleCall_3_0()); }
		rulefromSection
		{ after(grammarAccess.getSelectAccess().getFrom_sectionFromSectionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Where_sectionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getWhere_sectionWhere_clauseParserRuleCall_4_0()); }
		rulewhere_clause
		{ after(grammarAccess.getSelectAccess().getWhere_sectionWhere_clauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group_sectionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getGroup_sectionGroup_clauseParserRuleCall_5_0()); }
		rulegroup_clause
		{ after(grammarAccess.getSelectAccess().getGroup_sectionGroup_clauseParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Having_sectionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getHaving_sectionHaving_clauseParserRuleCall_6_0()); }
		rulehaving_clause
		{ after(grammarAccess.getSelectAccess().getHaving_sectionHaving_clauseParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromSection__From_itemAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromSectionAccess().getFrom_itemFromItemParserRuleCall_1_0()); }
		rulefromItem
		{ after(grammarAccess.getFromSectionAccess().getFrom_itemFromItemParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Table_nameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getTable_nameIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFromItemAccess().getTable_nameIDTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Select_exprAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getSelect_exprSelectParserRuleCall_0_1_1_0()); }
		ruleselect
		{ after(grammarAccess.getFromItemAccess().getSelect_exprSelectParserRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getRhsFromItemParserRuleCall_1_1_0()); }
		rulefromItem
		{ after(grammarAccess.getFromItemAccess().getRhsFromItemParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FromItem__Bool_exprAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFromItemAccess().getBool_exprBoolExpressionParserRuleCall_1_3_0()); }
		ruleboolExpression
		{ after(grammarAccess.getFromItemAccess().getBool_exprBoolExpressionParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where_clause__Bool_exprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhere_clauseAccess().getBool_exprBoolExpressionParserRuleCall_1_0()); }
		ruleboolExpression
		{ after(grammarAccess.getWhere_clauseAccess().getBool_exprBoolExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getLhsTermParserRuleCall_0_0()); }
		ruleTerm
		{ after(grammarAccess.getBoolExpressionAccess().getLhsTermParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpression__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolExpressionAccess().getRhsTermParserRuleCall_1_1_0()); }
		ruleTerm
		{ after(grammarAccess.getBoolExpressionAccess().getRhsTermParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getLhsFactorParserRuleCall_0_0()); }
		ruleFactor
		{ after(grammarAccess.getTermAccess().getLhsFactorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getRhsFactorParserRuleCall_1_1_0()); }
		ruleFactor
		{ after(grammarAccess.getTermAccess().getRhsFactorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__FactorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_0_1_0()); }
		ruleFactor
		{ after(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__ExprAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getExprBoolExpressionParserRuleCall_1_1_0()); }
		ruleboolExpression
		{ after(grammarAccess.getFactorAccess().getExprBoolExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__BinexpAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getBinexpBinaryParserRuleCall_4_0()); }
		ruleBinary
		{ after(grammarAccess.getFactorAccess().getBinexpBinaryParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getLhsColumnParserRuleCall_0_0()); }
		ruleColumn
		{ after(grammarAccess.getBinaryAccess().getLhsColumnParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Binary__RhsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAccess().getRhsColumnParserRuleCall_2_0()); }
		ruleColumn
		{ after(grammarAccess.getBinaryAccess().getRhsColumnParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__ExpressionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_clauseAccess().getExpressionsExpressionParserRuleCall_2_0()); }
		ruleexpression
		{ after(grammarAccess.getGroup_clauseAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_clause__ExpressionsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_clauseAccess().getExpressionsExpressionParserRuleCall_3_1_0()); }
		ruleexpression
		{ after(grammarAccess.getGroup_clauseAccess().getExpressionsExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Having_clause__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHaving_clauseAccess().getExprBoolExpressionParserRuleCall_1_0()); }
		ruleboolExpression
		{ after(grammarAccess.getHaving_clauseAccess().getExprBoolExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ColAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getColColumnParserRuleCall_1_0()); }
		ruleColumn
		{ after(grammarAccess.getExpressionAccess().getColColumnParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ColAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getColColumnParserRuleCall_3_1_0()); }
		ruleColumn
		{ after(grammarAccess.getExpressionAccess().getColColumnParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
