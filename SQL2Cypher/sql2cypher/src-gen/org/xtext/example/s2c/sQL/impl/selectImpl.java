/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.s2c.sQL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.s2c.sQL.SQLPackage;
import org.xtext.example.s2c.sQL.expression;
import org.xtext.example.s2c.sQL.fromSection;
import org.xtext.example.s2c.sQL.group_clause;
import org.xtext.example.s2c.sQL.having_clause;
import org.xtext.example.s2c.sQL.select;
import org.xtext.example.s2c.sQL.where_clause;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>select</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getFrom_section <em>From section</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getWhere_section <em>Where section</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getGroup_section <em>Group section</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getHaving_section <em>Having section</em>}</li>
 * </ul>
 *
 * @generated
 */
public class selectImpl extends MinimalEObjectImpl.Container implements select
{
  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<expression> expressions;

  /**
   * The cached value of the '{@link #getFrom_section() <em>From section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom_section()
   * @generated
   * @ordered
   */
  protected fromSection from_section;

  /**
   * The cached value of the '{@link #getWhere_section() <em>Where section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhere_section()
   * @generated
   * @ordered
   */
  protected where_clause where_section;

  /**
   * The cached value of the '{@link #getGroup_section() <em>Group section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup_section()
   * @generated
   * @ordered
   */
  protected group_clause group_section;

  /**
   * The cached value of the '{@link #getHaving_section() <em>Having section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHaving_section()
   * @generated
   * @ordered
   */
  protected having_clause having_section;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected selectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SQLPackage.Literals.SELECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<expression> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<expression>(expression.class, this, SQLPackage.SELECT__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public fromSection getFrom_section()
  {
    return from_section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFrom_section(fromSection newFrom_section, NotificationChain msgs)
  {
    fromSection oldFrom_section = from_section;
    from_section = newFrom_section;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__FROM_SECTION, oldFrom_section, newFrom_section);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom_section(fromSection newFrom_section)
  {
    if (newFrom_section != from_section)
    {
      NotificationChain msgs = null;
      if (from_section != null)
        msgs = ((InternalEObject)from_section).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__FROM_SECTION, null, msgs);
      if (newFrom_section != null)
        msgs = ((InternalEObject)newFrom_section).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__FROM_SECTION, null, msgs);
      msgs = basicSetFrom_section(newFrom_section, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__FROM_SECTION, newFrom_section, newFrom_section));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public where_clause getWhere_section()
  {
    return where_section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhere_section(where_clause newWhere_section, NotificationChain msgs)
  {
    where_clause oldWhere_section = where_section;
    where_section = newWhere_section;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__WHERE_SECTION, oldWhere_section, newWhere_section);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhere_section(where_clause newWhere_section)
  {
    if (newWhere_section != where_section)
    {
      NotificationChain msgs = null;
      if (where_section != null)
        msgs = ((InternalEObject)where_section).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__WHERE_SECTION, null, msgs);
      if (newWhere_section != null)
        msgs = ((InternalEObject)newWhere_section).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__WHERE_SECTION, null, msgs);
      msgs = basicSetWhere_section(newWhere_section, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__WHERE_SECTION, newWhere_section, newWhere_section));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public group_clause getGroup_section()
  {
    return group_section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGroup_section(group_clause newGroup_section, NotificationChain msgs)
  {
    group_clause oldGroup_section = group_section;
    group_section = newGroup_section;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__GROUP_SECTION, oldGroup_section, newGroup_section);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroup_section(group_clause newGroup_section)
  {
    if (newGroup_section != group_section)
    {
      NotificationChain msgs = null;
      if (group_section != null)
        msgs = ((InternalEObject)group_section).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__GROUP_SECTION, null, msgs);
      if (newGroup_section != null)
        msgs = ((InternalEObject)newGroup_section).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__GROUP_SECTION, null, msgs);
      msgs = basicSetGroup_section(newGroup_section, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__GROUP_SECTION, newGroup_section, newGroup_section));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public having_clause getHaving_section()
  {
    return having_section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHaving_section(having_clause newHaving_section, NotificationChain msgs)
  {
    having_clause oldHaving_section = having_section;
    having_section = newHaving_section;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__HAVING_SECTION, oldHaving_section, newHaving_section);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHaving_section(having_clause newHaving_section)
  {
    if (newHaving_section != having_section)
    {
      NotificationChain msgs = null;
      if (having_section != null)
        msgs = ((InternalEObject)having_section).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__HAVING_SECTION, null, msgs);
      if (newHaving_section != null)
        msgs = ((InternalEObject)newHaving_section).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__HAVING_SECTION, null, msgs);
      msgs = basicSetHaving_section(newHaving_section, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__HAVING_SECTION, newHaving_section, newHaving_section));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
      case SQLPackage.SELECT__FROM_SECTION:
        return basicSetFrom_section(null, msgs);
      case SQLPackage.SELECT__WHERE_SECTION:
        return basicSetWhere_section(null, msgs);
      case SQLPackage.SELECT__GROUP_SECTION:
        return basicSetGroup_section(null, msgs);
      case SQLPackage.SELECT__HAVING_SECTION:
        return basicSetHaving_section(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        return getExpressions();
      case SQLPackage.SELECT__FROM_SECTION:
        return getFrom_section();
      case SQLPackage.SELECT__WHERE_SECTION:
        return getWhere_section();
      case SQLPackage.SELECT__GROUP_SECTION:
        return getGroup_section();
      case SQLPackage.SELECT__HAVING_SECTION:
        return getHaving_section();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends expression>)newValue);
        return;
      case SQLPackage.SELECT__FROM_SECTION:
        setFrom_section((fromSection)newValue);
        return;
      case SQLPackage.SELECT__WHERE_SECTION:
        setWhere_section((where_clause)newValue);
        return;
      case SQLPackage.SELECT__GROUP_SECTION:
        setGroup_section((group_clause)newValue);
        return;
      case SQLPackage.SELECT__HAVING_SECTION:
        setHaving_section((having_clause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        getExpressions().clear();
        return;
      case SQLPackage.SELECT__FROM_SECTION:
        setFrom_section((fromSection)null);
        return;
      case SQLPackage.SELECT__WHERE_SECTION:
        setWhere_section((where_clause)null);
        return;
      case SQLPackage.SELECT__GROUP_SECTION:
        setGroup_section((group_clause)null);
        return;
      case SQLPackage.SELECT__HAVING_SECTION:
        setHaving_section((having_clause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
      case SQLPackage.SELECT__FROM_SECTION:
        return from_section != null;
      case SQLPackage.SELECT__WHERE_SECTION:
        return where_section != null;
      case SQLPackage.SELECT__GROUP_SECTION:
        return group_section != null;
      case SQLPackage.SELECT__HAVING_SECTION:
        return having_section != null;
    }
    return super.eIsSet(featureID);
  }

} //selectImpl
