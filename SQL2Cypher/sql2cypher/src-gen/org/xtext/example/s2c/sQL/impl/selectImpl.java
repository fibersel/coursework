/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.s2c.sQL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.s2c.sQL.Expression;
import org.xtext.example.s2c.sQL.GroupClause;
import org.xtext.example.s2c.sQL.HavingClause;
import org.xtext.example.s2c.sQL.SQLPackage;
import org.xtext.example.s2c.sQL.WhereClause;
import org.xtext.example.s2c.sQL.fromSection;
import org.xtext.example.s2c.sQL.select;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>select</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getFromSection <em>From Section</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getWhereClause <em>Where Clause</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getGroupClause <em>Group Clause</em>}</li>
 *   <li>{@link org.xtext.example.s2c.sQL.impl.selectImpl#getHavingClause <em>Having Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class selectImpl extends MinimalEObjectImpl.Container implements select
{
  /**
   * The cached value of the '{@link #getExpressions() <em>Expressions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressions()
   * @generated
   * @ordered
   */
  protected EList<Expression> expressions;

  /**
   * The cached value of the '{@link #getFromSection() <em>From Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromSection()
   * @generated
   * @ordered
   */
  protected fromSection fromSection;

  /**
   * The cached value of the '{@link #getWhereClause() <em>Where Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhereClause()
   * @generated
   * @ordered
   */
  protected WhereClause whereClause;

  /**
   * The cached value of the '{@link #getGroupClause() <em>Group Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupClause()
   * @generated
   * @ordered
   */
  protected GroupClause groupClause;

  /**
   * The cached value of the '{@link #getHavingClause() <em>Having Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHavingClause()
   * @generated
   * @ordered
   */
  protected HavingClause havingClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected selectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SQLPackage.Literals.SELECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expression> getExpressions()
  {
    if (expressions == null)
    {
      expressions = new EObjectContainmentEList<Expression>(Expression.class, this, SQLPackage.SELECT__EXPRESSIONS);
    }
    return expressions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public fromSection getFromSection()
  {
    return fromSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFromSection(fromSection newFromSection, NotificationChain msgs)
  {
    fromSection oldFromSection = fromSection;
    fromSection = newFromSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__FROM_SECTION, oldFromSection, newFromSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFromSection(fromSection newFromSection)
  {
    if (newFromSection != fromSection)
    {
      NotificationChain msgs = null;
      if (fromSection != null)
        msgs = ((InternalEObject)fromSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__FROM_SECTION, null, msgs);
      if (newFromSection != null)
        msgs = ((InternalEObject)newFromSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__FROM_SECTION, null, msgs);
      msgs = basicSetFromSection(newFromSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__FROM_SECTION, newFromSection, newFromSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhereClause getWhereClause()
  {
    return whereClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhereClause(WhereClause newWhereClause, NotificationChain msgs)
  {
    WhereClause oldWhereClause = whereClause;
    whereClause = newWhereClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__WHERE_CLAUSE, oldWhereClause, newWhereClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhereClause(WhereClause newWhereClause)
  {
    if (newWhereClause != whereClause)
    {
      NotificationChain msgs = null;
      if (whereClause != null)
        msgs = ((InternalEObject)whereClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__WHERE_CLAUSE, null, msgs);
      if (newWhereClause != null)
        msgs = ((InternalEObject)newWhereClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__WHERE_CLAUSE, null, msgs);
      msgs = basicSetWhereClause(newWhereClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__WHERE_CLAUSE, newWhereClause, newWhereClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupClause getGroupClause()
  {
    return groupClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGroupClause(GroupClause newGroupClause, NotificationChain msgs)
  {
    GroupClause oldGroupClause = groupClause;
    groupClause = newGroupClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__GROUP_CLAUSE, oldGroupClause, newGroupClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroupClause(GroupClause newGroupClause)
  {
    if (newGroupClause != groupClause)
    {
      NotificationChain msgs = null;
      if (groupClause != null)
        msgs = ((InternalEObject)groupClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__GROUP_CLAUSE, null, msgs);
      if (newGroupClause != null)
        msgs = ((InternalEObject)newGroupClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__GROUP_CLAUSE, null, msgs);
      msgs = basicSetGroupClause(newGroupClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__GROUP_CLAUSE, newGroupClause, newGroupClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HavingClause getHavingClause()
  {
    return havingClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHavingClause(HavingClause newHavingClause, NotificationChain msgs)
  {
    HavingClause oldHavingClause = havingClause;
    havingClause = newHavingClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__HAVING_CLAUSE, oldHavingClause, newHavingClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHavingClause(HavingClause newHavingClause)
  {
    if (newHavingClause != havingClause)
    {
      NotificationChain msgs = null;
      if (havingClause != null)
        msgs = ((InternalEObject)havingClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__HAVING_CLAUSE, null, msgs);
      if (newHavingClause != null)
        msgs = ((InternalEObject)newHavingClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.SELECT__HAVING_CLAUSE, null, msgs);
      msgs = basicSetHavingClause(newHavingClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.SELECT__HAVING_CLAUSE, newHavingClause, newHavingClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
      case SQLPackage.SELECT__FROM_SECTION:
        return basicSetFromSection(null, msgs);
      case SQLPackage.SELECT__WHERE_CLAUSE:
        return basicSetWhereClause(null, msgs);
      case SQLPackage.SELECT__GROUP_CLAUSE:
        return basicSetGroupClause(null, msgs);
      case SQLPackage.SELECT__HAVING_CLAUSE:
        return basicSetHavingClause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        return getExpressions();
      case SQLPackage.SELECT__FROM_SECTION:
        return getFromSection();
      case SQLPackage.SELECT__WHERE_CLAUSE:
        return getWhereClause();
      case SQLPackage.SELECT__GROUP_CLAUSE:
        return getGroupClause();
      case SQLPackage.SELECT__HAVING_CLAUSE:
        return getHavingClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        getExpressions().clear();
        getExpressions().addAll((Collection<? extends Expression>)newValue);
        return;
      case SQLPackage.SELECT__FROM_SECTION:
        setFromSection((fromSection)newValue);
        return;
      case SQLPackage.SELECT__WHERE_CLAUSE:
        setWhereClause((WhereClause)newValue);
        return;
      case SQLPackage.SELECT__GROUP_CLAUSE:
        setGroupClause((GroupClause)newValue);
        return;
      case SQLPackage.SELECT__HAVING_CLAUSE:
        setHavingClause((HavingClause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        getExpressions().clear();
        return;
      case SQLPackage.SELECT__FROM_SECTION:
        setFromSection((fromSection)null);
        return;
      case SQLPackage.SELECT__WHERE_CLAUSE:
        setWhereClause((WhereClause)null);
        return;
      case SQLPackage.SELECT__GROUP_CLAUSE:
        setGroupClause((GroupClause)null);
        return;
      case SQLPackage.SELECT__HAVING_CLAUSE:
        setHavingClause((HavingClause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.SELECT__EXPRESSIONS:
        return expressions != null && !expressions.isEmpty();
      case SQLPackage.SELECT__FROM_SECTION:
        return fromSection != null;
      case SQLPackage.SELECT__WHERE_CLAUSE:
        return whereClause != null;
      case SQLPackage.SELECT__GROUP_CLAUSE:
        return groupClause != null;
      case SQLPackage.SELECT__HAVING_CLAUSE:
        return havingClause != null;
    }
    return super.eIsSet(featureID);
  }

} //selectImpl
