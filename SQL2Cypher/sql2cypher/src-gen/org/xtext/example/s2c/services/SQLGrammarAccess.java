/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.s2c.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsSelectParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//    statements+=select;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=select
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//select
		public RuleCall getStatementsSelectParserRuleCall_0() { return cStatementsSelectParserRuleCall_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		private final Assignment cFrom_sectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFrom_sectionFromSectionParserRuleCall_3_0 = (RuleCall)cFrom_sectionAssignment_3.eContents().get(0);
		private final Assignment cWhere_sectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhere_sectionWhere_clauseParserRuleCall_4_0 = (RuleCall)cWhere_sectionAssignment_4.eContents().get(0);
		private final Assignment cGroup_sectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroup_sectionGroup_clauseParserRuleCall_5_0 = (RuleCall)cGroup_sectionAssignment_5.eContents().get(0);
		private final Assignment cHaving_sectionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHaving_sectionHaving_clauseParserRuleCall_6_0 = (RuleCall)cHaving_sectionAssignment_6.eContents().get(0);
		
		//select:
		//    'SELECT' expressions+=expression (',' expressions+=expression)*
		//    (from_section=fromSection)?
		//    (where_section=where_clause)?
		//    (group_section=group_clause)?
		//    (having_section=having_clause)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' expressions+=expression (',' expressions+=expression)*
		//(from_section=fromSection)?
		//(where_section=where_clause)?
		//(group_section=group_clause)?
		//(having_section=having_clause)?
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//expressions+=expression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_0() { return cExpressionsExpressionParserRuleCall_1_0; }
		
		//(',' expressions+=expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//expressions+=expression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }
		
		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_1_0() { return cExpressionsExpressionParserRuleCall_2_1_0; }
		
		//(from_section=fromSection)?
		public Assignment getFrom_sectionAssignment_3() { return cFrom_sectionAssignment_3; }
		
		//fromSection
		public RuleCall getFrom_sectionFromSectionParserRuleCall_3_0() { return cFrom_sectionFromSectionParserRuleCall_3_0; }
		
		//(where_section=where_clause)?
		public Assignment getWhere_sectionAssignment_4() { return cWhere_sectionAssignment_4; }
		
		//where_clause
		public RuleCall getWhere_sectionWhere_clauseParserRuleCall_4_0() { return cWhere_sectionWhere_clauseParserRuleCall_4_0; }
		
		//(group_section=group_clause)?
		public Assignment getGroup_sectionAssignment_5() { return cGroup_sectionAssignment_5; }
		
		//group_clause
		public RuleCall getGroup_sectionGroup_clauseParserRuleCall_5_0() { return cGroup_sectionGroup_clauseParserRuleCall_5_0; }
		
		//(having_section=having_clause)?
		public Assignment getHaving_sectionAssignment_6() { return cHaving_sectionAssignment_6; }
		
		//having_clause
		public RuleCall getHaving_sectionHaving_clauseParserRuleCall_6_0() { return cHaving_sectionHaving_clauseParserRuleCall_6_0; }
	}
	public class FromSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.fromSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFrom_itemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFrom_itemFromItemParserRuleCall_1_0 = (RuleCall)cFrom_itemAssignment_1.eContents().get(0);
		
		//fromSection:
		//    'FROM' from_item=fromItem;
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' from_item=fromItem
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//from_item=fromItem
		public Assignment getFrom_itemAssignment_1() { return cFrom_itemAssignment_1; }
		
		//fromItem
		public RuleCall getFrom_itemFromItemParserRuleCall_1_0() { return cFrom_itemFromItemParserRuleCall_1_0; }
	}
	public class FromItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.fromItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTable_nameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTable_nameIDTerminalRuleCall_0_0_0 = (RuleCall)cTable_nameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSelect_exprAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSelect_exprSelectParserRuleCall_0_1_1_0 = (RuleCall)cSelect_exprAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cJOINKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsFromItemParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		private final Keyword cONKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cBool_exprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBool_exprBoolExpressionParserRuleCall_1_3_0 = (RuleCall)cBool_exprAssignment_1_3.eContents().get(0);
		
		//fromItem:
		//    (table_name=ID | '('select_expr=select')') ('JOIN' rhs=fromItem 'ON' bool_expr=boolExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(table_name=ID | '('select_expr=select')') ('JOIN' rhs=fromItem 'ON' bool_expr=boolExpression)?
		public Group getGroup() { return cGroup; }
		
		//(table_name=ID | '('select_expr=select')')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//table_name=ID
		public Assignment getTable_nameAssignment_0_0() { return cTable_nameAssignment_0_0; }
		
		//ID
		public RuleCall getTable_nameIDTerminalRuleCall_0_0_0() { return cTable_nameIDTerminalRuleCall_0_0_0; }
		
		//'('select_expr=select')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//select_expr=select
		public Assignment getSelect_exprAssignment_0_1_1() { return cSelect_exprAssignment_0_1_1; }
		
		//select
		public RuleCall getSelect_exprSelectParserRuleCall_0_1_1_0() { return cSelect_exprSelectParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//('JOIN' rhs=fromItem 'ON' bool_expr=boolExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'JOIN'
		public Keyword getJOINKeyword_1_0() { return cJOINKeyword_1_0; }
		
		//rhs=fromItem
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//fromItem
		public RuleCall getRhsFromItemParserRuleCall_1_1_0() { return cRhsFromItemParserRuleCall_1_1_0; }
		
		//'ON'
		public Keyword getONKeyword_1_2() { return cONKeyword_1_2; }
		
		//bool_expr=boolExpression
		public Assignment getBool_exprAssignment_1_3() { return cBool_exprAssignment_1_3; }
		
		//boolExpression
		public RuleCall getBool_exprBoolExpressionParserRuleCall_1_3_0() { return cBool_exprBoolExpressionParserRuleCall_1_3_0; }
	}
	public class Where_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.where_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBool_exprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBool_exprBoolExpressionParserRuleCall_1_0 = (RuleCall)cBool_exprAssignment_1.eContents().get(0);
		
		//where_clause:
		//    'WHERE' bool_expr=boolExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' bool_expr=boolExpression
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//bool_expr=boolExpression
		public Assignment getBool_exprAssignment_1() { return cBool_exprAssignment_1; }
		
		//boolExpression
		public RuleCall getBool_exprBoolExpressionParserRuleCall_1_0() { return cBool_exprBoolExpressionParserRuleCall_1_0; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.boolExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsTermParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cORKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsTermParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//boolExpression:
		//    lhs=Term ('OR' rhs=Term)?;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=Term ('OR' rhs=Term)?
		public Group getGroup() { return cGroup; }
		
		//lhs=Term
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//Term
		public RuleCall getLhsTermParserRuleCall_0_0() { return cLhsTermParserRuleCall_0_0; }
		
		//('OR' rhs=Term)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'OR'
		public Keyword getORKeyword_1_0() { return cORKeyword_1_0; }
		
		//rhs=Term
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Term
		public RuleCall getRhsTermParserRuleCall_1_1_0() { return cRhsTermParserRuleCall_1_1_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsFactorParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cANDKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsFactorParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//Term:
		//    lhs=Factor ('AND' rhs=Factor);
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=Factor ('AND' rhs=Factor)
		public Group getGroup() { return cGroup; }
		
		//lhs=Factor
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//Factor
		public RuleCall getLhsFactorParserRuleCall_0_0() { return cLhsFactorParserRuleCall_0_0; }
		
		//('AND' rhs=Factor)
		public Group getGroup_1() { return cGroup_1; }
		
		//'AND'
		public Keyword getANDKeyword_1_0() { return cANDKeyword_1_0; }
		
		//rhs=Factor
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }
		
		//Factor
		public RuleCall getRhsFactorParserRuleCall_1_1_0() { return cRhsFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFactorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFactorFactorParserRuleCall_0_1_0 = (RuleCall)cFactorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprBoolExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFALSEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Assignment cBinexpAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cBinexpBinaryParserRuleCall_4_0 = (RuleCall)cBinexpAssignment_4.eContents().get(0);
		
		//Factor:
		//    'NOT' factor=Factor | '('expr=boolExpression ')' | 'TRUE' | 'FALSE' | binexp=Binary;
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT' factor=Factor | '('expr=boolExpression ')' | 'TRUE' | 'FALSE' | binexp=Binary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NOT' factor=Factor
		public Group getGroup_0() { return cGroup_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//factor=Factor
		public Assignment getFactorAssignment_0_1() { return cFactorAssignment_0_1; }
		
		//Factor
		public RuleCall getFactorFactorParserRuleCall_0_1_0() { return cFactorFactorParserRuleCall_0_1_0; }
		
		//'('expr=boolExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expr=boolExpression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//boolExpression
		public RuleCall getExprBoolExpressionParserRuleCall_1_1_0() { return cExprBoolExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_3() { return cFALSEKeyword_3; }
		
		//binexp=Binary
		public Assignment getBinexpAssignment_4() { return cBinexpAssignment_4; }
		
		//Binary
		public RuleCall getBinexpBinaryParserRuleCall_4_0() { return cBinexpBinaryParserRuleCall_4_0; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsColumnParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsColumnParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//Binary:
		//    lhs=Column ('<' | '>' | '=' | '>=' | '<=') rhs=Column;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=Column ('<' | '>' | '=' | '>=' | '<=') rhs=Column
		public Group getGroup() { return cGroup; }
		
		//lhs=Column
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//Column
		public RuleCall getLhsColumnParserRuleCall_0_0() { return cLhsColumnParserRuleCall_0_0; }
		
		//('<' | '>' | '=' | '>=' | '<=')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_1() { return cGreaterThanSignKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_3() { return cGreaterThanSignEqualsSignKeyword_1_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_4() { return cLessThanSignEqualsSignKeyword_1_4; }
		
		//rhs=Column
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//Column
		public RuleCall getRhsColumnParserRuleCall_2_0() { return cRhsColumnParserRuleCall_2_0; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.Column");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Column:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Group_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.group_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGROUPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		
		//group_clause:
		//    'GROUP' 'BY' expressions+=expression (',' expressions+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'GROUP' 'BY' expressions+=expression (',' expressions+=expression)*
		public Group getGroup() { return cGroup; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_0() { return cGROUPKeyword_0; }
		
		//'BY'
		public Keyword getBYKeyword_1() { return cBYKeyword_1; }
		
		//expressions+=expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//(',' expressions+=expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expressions+=expression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }
		
		//expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_1_0() { return cExpressionsExpressionParserRuleCall_3_1_0; }
	}
	public class Having_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.having_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHAVINGKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprBoolExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//having_clause:
		//    'HAVING' expr=boolExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'HAVING' expr=boolExpression
		public Group getGroup() { return cGroup; }
		
		//'HAVING'
		public Keyword getHAVINGKeyword_0() { return cHAVINGKeyword_0; }
		
		//expr=boolExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//boolExpression
		public RuleCall getExprBoolExpressionParserRuleCall_1_0() { return cExprBoolExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.s2c.SQL.expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Assignment cColAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cColColumnParserRuleCall_1_0 = (RuleCall)cColAssignment_1.eContents().get(0);
		private final Keyword cCountKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSumKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cColAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cColColumnParserRuleCall_3_1_0 = (RuleCall)cColAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//expression:
		//    '*' | col=Column | 'count()' | 'sum('col=Column')';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | col=Column | 'count()' | 'sum('col=Column')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//col=Column
		public Assignment getColAssignment_1() { return cColAssignment_1; }
		
		//Column
		public RuleCall getColColumnParserRuleCall_1_0() { return cColColumnParserRuleCall_1_0; }
		
		//'count()'
		public Keyword getCountKeyword_2() { return cCountKeyword_2; }
		
		//'sum('col=Column')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'sum('
		public Keyword getSumKeyword_3_0() { return cSumKeyword_3_0; }
		
		//col=Column
		public Assignment getColAssignment_3_1() { return cColAssignment_3_1; }
		
		//Column
		public RuleCall getColColumnParserRuleCall_3_1_0() { return cColColumnParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	
	
	private final ModelElements pModel;
	private final SelectElements pSelect;
	private final FromSectionElements pFromSection;
	private final FromItemElements pFromItem;
	private final Where_clauseElements pWhere_clause;
	private final BoolExpressionElements pBoolExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final BinaryElements pBinary;
	private final ColumnElements pColumn;
	private final Group_clauseElements pGroup_clause;
	private final Having_clauseElements pHaving_clause;
	private final ExpressionElements pExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSelect = new SelectElements();
		this.pFromSection = new FromSectionElements();
		this.pFromItem = new FromItemElements();
		this.pWhere_clause = new Where_clauseElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pBinary = new BinaryElements();
		this.pColumn = new ColumnElements();
		this.pGroup_clause = new Group_clauseElements();
		this.pHaving_clause = new Having_clauseElements();
		this.pExpression = new ExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.s2c.SQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    statements+=select;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//select:
	//    'SELECT' expressions+=expression (',' expressions+=expression)*
	//    (from_section=fromSection)?
	//    (where_section=where_clause)?
	//    (group_section=group_clause)?
	//    (having_section=having_clause)?;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//fromSection:
	//    'FROM' from_item=fromItem;
	public FromSectionElements getFromSectionAccess() {
		return pFromSection;
	}
	
	public ParserRule getFromSectionRule() {
		return getFromSectionAccess().getRule();
	}
	
	//fromItem:
	//    (table_name=ID | '('select_expr=select')') ('JOIN' rhs=fromItem 'ON' bool_expr=boolExpression)?;
	public FromItemElements getFromItemAccess() {
		return pFromItem;
	}
	
	public ParserRule getFromItemRule() {
		return getFromItemAccess().getRule();
	}
	
	//where_clause:
	//    'WHERE' bool_expr=boolExpression;
	public Where_clauseElements getWhere_clauseAccess() {
		return pWhere_clause;
	}
	
	public ParserRule getWhere_clauseRule() {
		return getWhere_clauseAccess().getRule();
	}
	
	//boolExpression:
	//    lhs=Term ('OR' rhs=Term)?;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//Term:
	//    lhs=Factor ('AND' rhs=Factor);
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//Factor:
	//    'NOT' factor=Factor | '('expr=boolExpression ')' | 'TRUE' | 'FALSE' | binexp=Binary;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Binary:
	//    lhs=Column ('<' | '>' | '=' | '>=' | '<=') rhs=Column;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//Column:
	//    name=ID;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//group_clause:
	//    'GROUP' 'BY' expressions+=expression (',' expressions+=expression)*;
	public Group_clauseElements getGroup_clauseAccess() {
		return pGroup_clause;
	}
	
	public ParserRule getGroup_clauseRule() {
		return getGroup_clauseAccess().getRule();
	}
	
	//having_clause:
	//    'HAVING' expr=boolExpression;
	public Having_clauseElements getHaving_clauseAccess() {
		return pHaving_clause;
	}
	
	public ParserRule getHaving_clauseRule() {
		return getHaving_clauseAccess().getRule();
	}
	
	//expression:
	//    '*' | col=Column | 'count()' | 'sum('col=Column')';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
