/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.s2c.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.s2c.sQL.Binary;
import org.xtext.example.s2c.sQL.BoolExpression;
import org.xtext.example.s2c.sQL.Column;
import org.xtext.example.s2c.sQL.Expression;
import org.xtext.example.s2c.sQL.Factor;
import org.xtext.example.s2c.sQL.FromItem;
import org.xtext.example.s2c.sQL.GroupClause;
import org.xtext.example.s2c.sQL.HavingClause;
import org.xtext.example.s2c.sQL.Model;
import org.xtext.example.s2c.sQL.SQLPackage;
import org.xtext.example.s2c.sQL.Term;
import org.xtext.example.s2c.sQL.WhereClause;
import org.xtext.example.s2c.sQL.fromSection;
import org.xtext.example.s2c.sQL.select;
import org.xtext.example.s2c.services.SQLGrammarAccess;

@SuppressWarnings("all")
public class SQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SQLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SQLPackage.BINARY:
				sequence_Binary(context, (Binary) semanticObject); 
				return; 
			case SQLPackage.BOOL_EXPRESSION:
				sequence_BoolExpression(context, (BoolExpression) semanticObject); 
				return; 
			case SQLPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case SQLPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case SQLPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case SQLPackage.FROM_ITEM:
				sequence_FromItem(context, (FromItem) semanticObject); 
				return; 
			case SQLPackage.GROUP_CLAUSE:
				sequence_GroupClause(context, (GroupClause) semanticObject); 
				return; 
			case SQLPackage.HAVING_CLAUSE:
				sequence_HavingClause(context, (HavingClause) semanticObject); 
				return; 
			case SQLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SQLPackage.TERM:
				sequence_Term(context, (Term) semanticObject); 
				return; 
			case SQLPackage.WHERE_CLAUSE:
				sequence_WhereClause(context, (WhereClause) semanticObject); 
				return; 
			case SQLPackage.FROM_SECTION:
				sequence_fromSection(context, (fromSection) semanticObject); 
				return; 
			case SQLPackage.SELECT:
				sequence_select(context, (select) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Binary returns Binary
	 *
	 * Constraint:
	 *     (lhs=Column rhs=Column)
	 */
	protected void sequence_Binary(ISerializationContext context, Binary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.BINARY__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.BINARY__LHS));
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.BINARY__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.BINARY__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryAccess().getLhsColumnParserRuleCall_0_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getBinaryAccess().getRhsColumnParserRuleCall_2_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BoolExpression returns BoolExpression
	 *
	 * Constraint:
	 *     (lhs=Term rhs=Term?)
	 */
	protected void sequence_BoolExpression(ISerializationContext context, BoolExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.COLUMN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.COLUMN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (col=Column | col=Column)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Factor returns Factor
	 *
	 * Constraint:
	 *     (factor=Factor | expr=BoolExpression | binexp=Binary)
	 */
	protected void sequence_Factor(ISerializationContext context, Factor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FromItem returns FromItem
	 *
	 * Constraint:
	 *     ((tableName=ID | select_expr=select) (rhs=FromItem bool_expr=BoolExpression)?)
	 */
	protected void sequence_FromItem(ISerializationContext context, FromItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GroupClause returns GroupClause
	 *
	 * Constraint:
	 *     (expressions+=Expression expressions+=Expression*)
	 */
	protected void sequence_GroupClause(ISerializationContext context, GroupClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HavingClause returns HavingClause
	 *
	 * Constraint:
	 *     expr=BoolExpression
	 */
	protected void sequence_HavingClause(ISerializationContext context, HavingClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.HAVING_CLAUSE__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.HAVING_CLAUSE__EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHavingClauseAccess().getExprBoolExpressionParserRuleCall_1_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     statements+=select
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Term returns Term
	 *
	 * Constraint:
	 *     (lhs=Factor rhs=Factor)
	 */
	protected void sequence_Term(ISerializationContext context, Term semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.TERM__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.TERM__LHS));
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.TERM__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.TERM__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermAccess().getLhsFactorParserRuleCall_0_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getTermAccess().getRhsFactorParserRuleCall_1_1_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WhereClause returns WhereClause
	 *
	 * Constraint:
	 *     boolExpression=BoolExpression
	 */
	protected void sequence_WhereClause(ISerializationContext context, WhereClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.WHERE_CLAUSE__BOOL_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.WHERE_CLAUSE__BOOL_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhereClauseAccess().getBoolExpressionBoolExpressionParserRuleCall_1_0(), semanticObject.getBoolExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     fromSection returns fromSection
	 *
	 * Constraint:
	 *     fromItem=FromItem
	 */
	protected void sequence_fromSection(ISerializationContext context, fromSection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SQLPackage.Literals.FROM_SECTION__FROM_ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SQLPackage.Literals.FROM_SECTION__FROM_ITEM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFromSectionAccess().getFromItemFromItemParserRuleCall_1_0(), semanticObject.getFromItem());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     select returns select
	 *
	 * Constraint:
	 *     (
	 *         expressions+=Expression 
	 *         expressions+=Expression* 
	 *         fromSection=fromSection? 
	 *         whereClause=WhereClause? 
	 *         groupClause=GroupClause? 
	 *         havingClause=HavingClause?
	 *     )
	 */
	protected void sequence_select(ISerializationContext context, select semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
