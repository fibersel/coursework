/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.s2c.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.s2c.services.SQLGrammarAccess;

@SuppressWarnings("all")
public class SQLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SQLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Binary_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_3_or_GreaterThanSignKeyword_1_1_or_LessThanSignEqualsSignKeyword_1_4_or_LessThanSignKeyword_1_0;
	protected AbstractElementAlias match_Factor_FALSEKeyword_3_or_TRUEKeyword_2;
	protected AbstractElementAlias match_expression_AsteriskKeyword_0_or_CountKeyword_2;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SQLGrammarAccess) access;
		match_Binary_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_3_or_GreaterThanSignKeyword_1_1_or_LessThanSignEqualsSignKeyword_1_4_or_LessThanSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBinaryAccess().getEqualsSignKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getBinaryAccess().getGreaterThanSignEqualsSignKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getBinaryAccess().getGreaterThanSignKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getBinaryAccess().getLessThanSignEqualsSignKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getBinaryAccess().getLessThanSignKeyword_1_0()));
		match_Factor_FALSEKeyword_3_or_TRUEKeyword_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFactorAccess().getFALSEKeyword_3()), new TokenAlias(false, false, grammarAccess.getFactorAccess().getTRUEKeyword_2()));
		match_expression_AsteriskKeyword_0_or_CountKeyword_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getAsteriskKeyword_0()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getCountKeyword_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Binary_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_3_or_GreaterThanSignKeyword_1_1_or_LessThanSignEqualsSignKeyword_1_4_or_LessThanSignKeyword_1_0.equals(syntax))
				emit_Binary_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_3_or_GreaterThanSignKeyword_1_1_or_LessThanSignEqualsSignKeyword_1_4_or_LessThanSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Factor_FALSEKeyword_3_or_TRUEKeyword_2.equals(syntax))
				emit_Factor_FALSEKeyword_3_or_TRUEKeyword_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_expression_AsteriskKeyword_0_or_CountKeyword_2.equals(syntax))
				emit_expression_AsteriskKeyword_0_or_CountKeyword_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '<' | '>' | '=' | '>=' | '<='
	 *
	 * This ambiguous syntax occurs at:
	 *     lhs=Column (ambiguity) rhs=Column
	 */
	protected void emit_Binary_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_3_or_GreaterThanSignKeyword_1_1_or_LessThanSignEqualsSignKeyword_1_4_or_LessThanSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'TRUE' | 'FALSE'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Factor_FALSEKeyword_3_or_TRUEKeyword_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*' | 'count()'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_expression_AsteriskKeyword_0_or_CountKeyword_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
